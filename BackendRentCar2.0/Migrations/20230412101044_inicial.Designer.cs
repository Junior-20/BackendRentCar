// <auto-generated />
using System;
using BackendRentCar2._0.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendRentCar2._0.Migrations
{
    [DbContext(typeof(RENTACARContext))]
    [Migration("20230412101044_inicial")]
    partial class inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BackendRentCar2._0.Models.Cliente", b =>
                {
                    b.Property<int>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Cliente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCliente"), 1L, 1);

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<decimal>("LimiteCredito")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("Limite_Credito");

                    b.Property<string>("NoTarjetaCr")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("No_TarjetaCR");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TipoPersona")
                        .IsRequired()
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("varchar(17)")
                        .HasColumnName("Tipo_Persona");

                    b.HasKey("IdCliente");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("BackendRentCar2._0.Models.Documento", b =>
                {
                    b.Property<int>("IdDocumento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Documento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDocumento"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Estado")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdDocumento");

                    b.ToTable("Documento", (string)null);
                });

            modelBuilder.Entity("BackendRentCar2._0.Models.Empleado", b =>
                {
                    b.Property<int>("IdEmpleado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Empleado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEmpleado"), 1L, 1);

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("datetime")
                        .HasColumnName("Fecha_Ingreso");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("PorcientoComision")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("Porciento_Comision");

                    b.Property<string>("TandaLabor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Tanda_Labor");

                    b.HasKey("IdEmpleado");

                    b.ToTable("Empleados");
                });

            modelBuilder.Entity("BackendRentCar2._0.Models.Inspeccion", b =>
                {
                    b.Property<int>("IdTransaccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Transaccion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTransaccion"), 1L, 1);

                    b.Property<string>("CantidadCombustible")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Cantidad_Combustible");

                    b.Property<int>("EmpleadoInspeccion")
                        .HasColumnType("int")
                        .HasColumnName("Empleado_Inspeccion");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("EstadoGomas")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Estado_Gomas");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<string>("Gato")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("GomaRespuesta")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Goma_Respuesta");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int")
                        .HasColumnName("Id_Cliente");

                    b.Property<string>("Roturas")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("TieneRalladuras")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Tiene_Ralladuras");

                    b.Property<int>("Vehiculo")
                        .HasColumnType("int");

                    b.HasKey("IdTransaccion");

                    b.HasIndex(new[] { "EmpleadoInspeccion" }, "IX_Inspeccion_Empleado_Inspeccion");

                    b.HasIndex(new[] { "IdCliente" }, "IX_Inspeccion_Id_Cliente");

                    b.HasIndex(new[] { "Vehiculo" }, "IX_Inspeccion_Vehiculo");

                    b.ToTable("Inspeccion", (string)null);
                });

            modelBuilder.Entity("BackendRentCar2._0.Models.Marcass", b =>
                {
                    b.Property<int>("IdMarca")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Marca");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMarca"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdMarca");

                    b.ToTable("Marcass", (string)null);
                });

            modelBuilder.Entity("BackendRentCar2._0.Models.Modelo", b =>
                {
                    b.Property<int>("IdModelo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Modelo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdModelo"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdMarca")
                        .HasColumnType("int")
                        .HasColumnName("Id_Marca");

                    b.HasKey("IdModelo");

                    b.HasIndex("IdMarca");

                    b.ToTable("Modelos");
                });

            modelBuilder.Entity("BackendRentCar2._0.Models.Rentum", b =>
                {
                    b.Property<decimal>("IdRenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("Id_Renta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("IdRenta"), 1L, 1);

                    b.Property<decimal?>("Abono")
                        .HasColumnType("money");

                    b.Property<decimal>("CantidadDias")
                        .HasColumnType("numeric(18,0)");

                    b.Property<int>("Cliente")
                        .HasColumnType("int");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("DocGarantia")
                        .HasColumnType("int")
                        .HasColumnName("Doc_Garantia");

                    b.Property<int>("Empleado")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("FechaDevolucion")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaRenta")
                        .HasColumnType("datetime");

                    b.Property<decimal>("MontoxDia")
                        .HasColumnType("money");

                    b.Property<int>("Vehiculo")
                        .HasColumnType("int");

                    b.HasKey("IdRenta")
                        .HasName("PK_RentayDevolucion");

                    b.HasIndex(new[] { "Cliente" }, "IX_Renta_Cliente");

                    b.HasIndex(new[] { "DocGarantia" }, "IX_Renta_Doc_Garantia");

                    b.HasIndex(new[] { "Empleado" }, "IX_Renta_Empleado");

                    b.HasIndex(new[] { "Vehiculo" }, "IX_Renta_Vehiculo");

                    b.ToTable("Renta");
                });

            modelBuilder.Entity("BackendRentCar2._0.Models.TiposdeCombustible", b =>
                {
                    b.Property<int>("IdTiposCombustible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_TiposCombustible");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTiposCombustible"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdTiposCombustible");

                    b.ToTable("TiposdeCombustibles");
                });

            modelBuilder.Entity("BackendRentCar2._0.Models.TiposdeVehiculo", b =>
                {
                    b.Property<int>("IdTiposVehiculo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_TiposVehiculo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTiposVehiculo"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdTiposVehiculo");

                    b.ToTable("TiposdeVehiculos");
                });

            modelBuilder.Entity("BackendRentCar2._0.Models.Vehiculo", b =>
                {
                    b.Property<int>("IdVehiculos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Vehiculos");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVehiculos"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Marca")
                        .HasColumnType("int");

                    b.Property<int>("Modelo")
                        .HasColumnType("int");

                    b.Property<string>("NoChasis")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("No_Chasis");

                    b.Property<string>("NoMotor")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("No_Motor");

                    b.Property<string>("NoPlaca")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("No_Placa");

                    b.Property<int>("TipoCombustible")
                        .HasColumnType("int")
                        .HasColumnName("Tipo_Combustible");

                    b.Property<int>("TipoVehiculo")
                        .HasColumnType("int")
                        .HasColumnName("Tipo_Vehiculo");

                    b.HasKey("IdVehiculos")
                        .HasName("PK_Vehiculos_1");

                    b.HasIndex(new[] { "Marca" }, "IX_Vehiculos_Marca");

                    b.HasIndex(new[] { "Modelo" }, "IX_Vehiculos_Modelo");

                    b.HasIndex(new[] { "TipoCombustible" }, "IX_Vehiculos_Tipo_Combustible");

                    b.HasIndex(new[] { "TipoVehiculo" }, "IX_Vehiculos_Tipo_Vehiculo");

                    b.ToTable("Vehiculos");
                });

            modelBuilder.Entity("BackendRentCar2._0.Models.Inspeccion", b =>
                {
                    b.HasOne("BackendRentCar2._0.Models.Empleado", "EmpleadoInspeccionNavigation")
                        .WithMany("Inspeccions")
                        .HasForeignKey("EmpleadoInspeccion")
                        .IsRequired()
                        .HasConstraintName("FK_Inspeccion_Empleados");

                    b.HasOne("BackendRentCar2._0.Models.Cliente", "IdClienteNavigation")
                        .WithMany("Inspeccions")
                        .HasForeignKey("IdCliente")
                        .IsRequired()
                        .HasConstraintName("FK_Inspeccion_Clientes");

                    b.HasOne("BackendRentCar2._0.Models.Vehiculo", "VehiculoNavigation")
                        .WithMany("Inspeccions")
                        .HasForeignKey("Vehiculo")
                        .IsRequired()
                        .HasConstraintName("FK_Inspeccion_Vehiculos");

                    b.Navigation("EmpleadoInspeccionNavigation");

                    b.Navigation("IdClienteNavigation");

                    b.Navigation("VehiculoNavigation");
                });

            modelBuilder.Entity("BackendRentCar2._0.Models.Modelo", b =>
                {
                    b.HasOne("BackendRentCar2._0.Models.Marcass", "IdMarcaNavigation")
                        .WithMany("Modelos")
                        .HasForeignKey("IdMarca")
                        .IsRequired()
                        .HasConstraintName("FK_Modelos_Marcass");

                    b.Navigation("IdMarcaNavigation");
                });

            modelBuilder.Entity("BackendRentCar2._0.Models.Rentum", b =>
                {
                    b.HasOne("BackendRentCar2._0.Models.Cliente", "ClienteNavigation")
                        .WithMany("Renta")
                        .HasForeignKey("Cliente")
                        .IsRequired()
                        .HasConstraintName("FK_Renta_Clientes");

                    b.HasOne("BackendRentCar2._0.Models.Documento", "DocGarantiaNavigation")
                        .WithMany("Renta")
                        .HasForeignKey("DocGarantia")
                        .HasConstraintName("FK_Renta_Documento");

                    b.HasOne("BackendRentCar2._0.Models.Empleado", "EmpleadoNavigation")
                        .WithMany("Renta")
                        .HasForeignKey("Empleado")
                        .IsRequired()
                        .HasConstraintName("FK_Renta_Empleados");

                    b.HasOne("BackendRentCar2._0.Models.Vehiculo", "VehiculoNavigation")
                        .WithMany("Renta")
                        .HasForeignKey("Vehiculo")
                        .IsRequired()
                        .HasConstraintName("FK_Renta_Vehiculos");

                    b.Navigation("ClienteNavigation");

                    b.Navigation("DocGarantiaNavigation");

                    b.Navigation("EmpleadoNavigation");

                    b.Navigation("VehiculoNavigation");
                });

            modelBuilder.Entity("BackendRentCar2._0.Models.Vehiculo", b =>
                {
                    b.HasOne("BackendRentCar2._0.Models.Marcass", "MarcaNavigation")
                        .WithMany("Vehiculos")
                        .HasForeignKey("Marca")
                        .IsRequired()
                        .HasConstraintName("FK_Vehiculos_Marcass");

                    b.HasOne("BackendRentCar2._0.Models.Modelo", "ModeloNavigation")
                        .WithMany("Vehiculos")
                        .HasForeignKey("Modelo")
                        .IsRequired()
                        .HasConstraintName("FK_Vehiculos_Modelos");

                    b.HasOne("BackendRentCar2._0.Models.TiposdeCombustible", "TipoCombustibleNavigation")
                        .WithMany("Vehiculos")
                        .HasForeignKey("TipoCombustible")
                        .IsRequired()
                        .HasConstraintName("FK_Vehiculos_TiposdeCombustibles");

                    b.HasOne("BackendRentCar2._0.Models.TiposdeVehiculo", "TipoVehiculoNavigation")
                        .WithMany("Vehiculos")
                        .HasForeignKey("TipoVehiculo")
                        .IsRequired()
                        .HasConstraintName("FK_Vehiculos_TiposdeVehiculos");

                    b.Navigation("MarcaNavigation");

                    b.Navigation("ModeloNavigation");

                    b.Navigation("TipoCombustibleNavigation");

                    b.Navigation("TipoVehiculoNavigation");
                });

            modelBuilder.Entity("BackendRentCar2._0.Models.Cliente", b =>
                {
                    b.Navigation("Inspeccions");

                    b.Navigation("Renta");
                });

            modelBuilder.Entity("BackendRentCar2._0.Models.Documento", b =>
                {
                    b.Navigation("Renta");
                });

            modelBuilder.Entity("BackendRentCar2._0.Models.Empleado", b =>
                {
                    b.Navigation("Inspeccions");

                    b.Navigation("Renta");
                });

            modelBuilder.Entity("BackendRentCar2._0.Models.Marcass", b =>
                {
                    b.Navigation("Modelos");

                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("BackendRentCar2._0.Models.Modelo", b =>
                {
                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("BackendRentCar2._0.Models.TiposdeCombustible", b =>
                {
                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("BackendRentCar2._0.Models.TiposdeVehiculo", b =>
                {
                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("BackendRentCar2._0.Models.Vehiculo", b =>
                {
                    b.Navigation("Inspeccions");

                    b.Navigation("Renta");
                });
#pragma warning restore 612, 618
        }
    }
}
